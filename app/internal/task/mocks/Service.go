// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	task "Sber/app/internal/task"
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *Service) Create(ctx context.Context, _a1 *task.CreateTask) (*task.Task, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *task.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *task.CreateTask) (*task.Task, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *task.CreateTask) *task.Task); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*task.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *task.CreateTask) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *Service) Delete(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *Service) FindAll() (*[]task.Task, error) {
	ret := _m.Called()

	var r0 *[]task.Task
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]task.Task, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]task.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]task.Task)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllStatus provides a mock function with given fields: ctx, status
func (_m *Service) FindAllStatus(ctx context.Context, status bool) (*[]task.Task, error) {
	ret := _m.Called(ctx, status)

	var r0 *[]task.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) (*[]task.Task, error)); ok {
		return rf(ctx, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool) *[]task.Task); ok {
		r0 = rf(ctx, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]task.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = rf(ctx, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindDateAllAvailable provides a mock function with given fields: ctx, date, status
func (_m *Service) FindDateAllAvailable(ctx context.Context, date time.Time, status bool) (*[]task.Task, error) {
	ret := _m.Called(ctx, date, status)

	var r0 *[]task.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, bool) (*[]task.Task, error)); ok {
		return rf(ctx, date, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, bool) *[]task.Task); ok {
		r0 = rf(ctx, date, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]task.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, bool) error); ok {
		r1 = rf(ctx, date, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *Service) GetById(ctx context.Context, id int64) (*task.Task, error) {
	ret := _m.Called(ctx, id)

	var r0 *task.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*task.Task, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *task.Task); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*task.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PartiallyUpdate provides a mock function with given fields: ctx, _a1
func (_m *Service) PartiallyUpdate(ctx context.Context, _a1 *task.PartiallyUpdateTask) (*task.Task, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *task.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *task.PartiallyUpdateTask) (*task.Task, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *task.PartiallyUpdateTask) *task.Task); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*task.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *task.PartiallyUpdateTask) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, _a1
func (_m *Service) Update(ctx context.Context, _a1 *task.Task) (*task.Task, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *task.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *task.Task) (*task.Task, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *task.Task) *task.Task); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*task.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *task.Task) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
